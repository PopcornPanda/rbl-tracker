variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: "unix:///var/run/docker.sock"
  CONTAINER_DEV_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
  CONTAINER_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
  CONTAINER_LATEST_IMAGE: ${CI_REGISTRY_IMAGE}:latest
  CONTAINER_CANARY_IMAGE: ${CI_REGISTRY_IMAGE}:canary

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_REF_PROTECTED

stages:
  - build
  - docker
  - publish image

.build:
  image: mcr.microsoft.com/dotnet/sdk:7.0
  stage: build
  script:
    - dotnet restore
    - dotnet publish -c Release -o publish/ --os alpine --arch ${ARCH}
  artifacts:
    untracked: false
    when: on_success
    expire_in: 1 hour
    paths:
      - Dockerfile
      - publish/
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
    - if: $CI_COMMIT_TAG
      when: always
    - if: $CI_COMMIT_TAG =~ "/^$/" && $CI_PIPELINE_SOURCE != 'merge_request_event'
      when: manual

.docker:
  image:
    name: gcr.io/kaniko-project/executor:v1.9.2-debug
    entrypoint: [""]
  stage: docker
  variables:
    GIT_STRATEGY: none
  before_script:
    - - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"$CI_DEPENDENCY_PROXY_SERVER\":{\"auth\":\"$(printf "%s:%s" ${CI_DEPENDENCY_PROXY_USER} "${CI_DEPENDENCY_PROXY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CONTAINER_DEV_IMAGE}-${ARCH}"
      --use-new-run
      --cache=true
      --cache-ttl=48h
      --customPlatform=linux/${ARCH}

build amd64 application:
  extends: .build
  variables:
    ARCH: "x64"
  tags:
  - docker
  - x86

build arm64 application:
  extends: .build
  variables:
    ARCH: "arm64"
  tags:
  - docker
  - arm64

build amd64 image:
  extends: .docker
  variables:
    ARCH: "amd64"
  needs:
    - build amd64 application
  dependencies:
    - build amd64 application
  tags:
    - docker
    - x86  

build arm64 image:
  extends: .docker
  variables:
    ARCH: "arm64"
  needs:
    - build arm64 application
  dependencies:
    - build arm64 application
  tags:
    - docker
    - arm64 

make multi-arch:
  image: docker:23.0.4
  stage: publish image
  variables:
    GIT_STRATEGY: none
  needs:
    - build amd64 image
    - build arm64 image
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker manifest create ${CONTAINER_DEV_IMAGE} --amend ${CONTAINER_DEV_IMAGE}-amd64 --amend ${CONTAINER_DEV_IMAGE}-arm64
    - docker manifest push ${CONTAINER_DEV_IMAGE}
  tags:
    - docker
    - x86

tag release image:
  image: docker:23.0.4
  stage: publish image
  variables:
    GIT_STRATEGY: none
  needs:
    - make multi-arch
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker tag ${CONTAINER_DEV_IMAGE} ${CONTAINER_RELEASE_IMAGE}
    - docker push ${CONTAINER_RELEASE_IMAGE}
  tags:
    - docker
    - x86
  only:
    - tags
